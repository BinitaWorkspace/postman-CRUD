{
	"info": {
		"_postman_id": "dbf296c5-6372-4d3d-9d42-74f748379838",
		"name": "CRUD REST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34779269"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "GET User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"This is Post Test Script\")\r",
									"\r",
									"let urlvar = pm.variables.get(\"url\")\r",
									"console.log(\"Value for URL Variable which  is tested earlier is:\", urlvar);\r",
									"pm.globals.set(\"name\", \"POSTMAN\");\r",
									"console.log(pm.globals.get(\"Modified name is : \",\"name\"));\r",
									"let globalvar = pm.globals.get(\"Environment variable is: \",\"Environment\")\r",
									"console.log(globalvar);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/users/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "GET User",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 08 May 2024 05:05:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1714417291&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=kneJsnPECM2p2%2B6%2FuUmG1Mf3c6tDMxHY3ph5aBASoH0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1714417291&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=kneJsnPECM2p2%2B6%2FuUmG1Mf3c6tDMxHY3ph5aBASoH0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"118-pbdwwFo9SKNhD3Lx5iHJyngpq00\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=14400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "HIT"
								},
								{
									"key": "Age",
									"value": "6770"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8806eafbfb1d551b-SYD"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 2,\n        \"email\": \"janet.weaver@reqres.in\",\n        \"first_name\": \"Janet\",\n        \"last_name\": \"Weaver\",\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n    },\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
						}
					]
				},
				{
					"name": "GET UserList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that theResponse time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"console.log();\r",
									"pm.test(\"Verify Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/users?page=2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get with Error code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Post Test the status code check\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve the saved \"email\" value from the variable\r",
									"pm.test(\"Validate response against saved 'email' value\", function() {\r",
									"    var savedEmail = pm.globals.get(\"email\");\r",
									"    // Alternatively, you can use pm.environment.get(\"userId\") if it was stored on an environment\r",
									"    //Get the email from the response\r",
									"    var responseBody = pm.response.json();\r",
									"    var responseEmail = responseBody.email;\r",
									"    \r",
									"    pm.expect(responseEmail).to.equal(savedEmail);\r",
									"});\r",
									"\r",
									"// Retrieve the saved \"password\" value from the variable\r",
									"pm.test(\"Validate response against saved 'email' value\", function() {\r",
									"    var savedPassword = pm.globals.get(\"password\");\r",
									"    // Alternatively, you can use pm.environment.get(\"userId\") if it was stored on an environment\r",
									"    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsePassword = responseBody.password;\r",
									"    \r",
									"    pm.expect(responsePassword).to.equal(savedPassword);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"email\": \"{{email}}\",\r\n \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/{{endpoint}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//negative test\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DataDriven POST",
			"item": [
				{
					"name": "POST Data Driven",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve the saved \"email\" value from the Data File\r",
									"pm.test(\"Validate response against saved 'email' value\", function() {\r",
									"    var savedEmail = pm.iterationData.get(\"email\");\r",
									"    // get the email from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responseemail = responseBody.email;\r",
									"    //compare the emails\r",
									"    pm.expect(responseemail).to.equal(savedEmail);\r",
									"});\r",
									"// Retrieve the saved \"password\" value from the Data File\r",
									"pm.test(\"Validate response against saved 'email' value\", function() {\r",
									"    var savedPassword = pm.iterationData.get(\"email\");\r",
									"    // get the email from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsepassword = responseBody.password;\r",
									"    //compare the emails\r",
									"    pm.expect(responsepassword).to.equal(savedPassword);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/{{endpoint}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "post data from json file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieve the saved \"email\" value from the Data File",
									"pm.test(\"Validate response against saved 'email' value\", function() {",
									"    var savedEmail = pm.iterationData.get(\"email\");",
									"    // get the email from response    ",
									"    var responseBody = pm.response.json();",
									"    var responseemail = responseBody.email;",
									"    //compare the emails",
									"    pm.expect(responseemail).to.equal(savedEmail);",
									"});",
									"// Retrieve the saved \"password\" value from the Data File",
									"pm.test(\"Validate response against saved 'password' value\", function() {",
									"    var savedPassword = pm.iterationData.get(\"password\");",
									"    // get the password from response    ",
									"    var responseBody = pm.response.json();",
									"    var responsepassword = responseBody.password;",
									"    //compare the passwords",
									"    pm.expect(responsepassword).to.equal(savedPassword);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/{{endpoint}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UPDATE",
			"item": [
				{
					"name": "User data Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Test Results\")\r",
									"\r",
									"// if the name and the job are updated \r",
									"pm.test(\"Validate response against saved 'name' value\", function() {\r",
									"    var savedName = pm.iterationData.get(\"name\");\r",
									"    // get the name from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsename = responseBody.name;\r",
									"    //compare the name\r",
									"    pm.expect(responsename).to.equal(savedName);\r",
									"});\r",
									"// Retrieve the saved \"job\" value from the Data File\r",
									"pm.test(\"Validate response against saved 'job' value\", function() {\r",
									"    var savedJob = pm.iterationData.get(\"job\");\r",
									"    // get the email from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsejob = responseBody.job;\r",
									"    //compare the emails\r",
									"    pm.expect(responsejob).to.equal(savedJob);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/{{endpoint}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"{{endpoint}}"
							]
						},
						"description": "This is to test the PUT request using the website:  https://reqres.in/"
					},
					"response": []
				},
				{
					"name": "Patch_Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Test Results\")\r",
									"\r",
									"// if the name and the job are updated \r",
									"\r",
									"// Retrieve the saved \"job\" value from the Data File\r",
									"pm.test(\"Validate response against saved 'name' value\", function() {\r",
									"    var savedName = pm.iterationData.get(\"name\");\r",
									"    // get the name from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsename = responseBody.name;\r",
									"    //compare the name\r",
									"    pm.expect(responsename).to.equal(savedName);\r",
									"});\r",
									"// Retrieve the saved \"job\" value from the Data File\r",
									"pm.test(\"Validate response against saved 'job' value\", function() {\r",
									"    var savedJob = pm.iterationData.get(\"job\");\r",
									"    // get the email from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsejob = responseBody.job;\r",
									"    //compare the emails\r",
									"    pm.expect(responsejob).to.equal(savedJob);\r",
									"});\r",
									"// Retrieve the saved \"first_name\" value from the Data File\r",
									"pm.test(\"Validate response against saved 'first_name' value\", function() {\r",
									"    var savedfirst_name = pm.iterationData.get(\"first_name\");\r",
									"    // get the name from response    \r",
									"    var responseBody = pm.response.json();\r",
									"    var responsefirst_name = responseBody.first_name;\r",
									"    //compare the name\r",
									"    pm.expect(responsefirst_name).to.equal(savedfirst_name);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"first_name\" : \"{{first_name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/{{endpoint}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"Starting the test\")\r",
					"console.log(\"This is pre request script \")\r",
					"let urlvar = pm.collectionVariables.get(\"url\")\r",
					"console.log(\"Value for URL Variable which is to be tested is : \", urlvar);\r",
					"let globalvar = pm.globals.get(\"Environment\")\r",
					"console.log(\"The value of Environment variable is : \", globalvar);\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://reqres.in",
			"type": "string"
		}
	]
}